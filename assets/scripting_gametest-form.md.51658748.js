import{_ as n,c as s,o as a,e as t}from"./404.md.b5733099.js";var e="/assets/images/gametest/gametest-form/action-form.png",p="/assets/images/gametest/gametest-form/message-form.png",o="/assets/images/gametest/gametest-form/modal-form.png";const g='{"title":"Gametest Form","description":"","frontmatter":{"title":"Gametest Form","category":"Game Tests"},"headers":[{"level":2,"title":"Setup","slug":"setup"},{"level":2,"title":"Form Type","slug":"form-type"},{"level":3,"title":"ActionFormData","slug":"actionformdata"},{"level":3,"title":"MessageFormData","slug":"messageformdata"},{"level":3,"title":"ModalFormData","slug":"modalformdata"},{"level":2,"title":"Show and Respond","slug":"show-and-respond"},{"level":3,"title":"ActionFormData","slug":"actionformdata-1"},{"level":3,"title":"ModalFormData","slug":"modalformdata-1"},{"level":3,"title":"ModalFormData","slug":"modalformdata-2"}],"relativePath":"scripting/gametest-form.md"}',c={},u=t(`<p>Minecraft 1.18.30 released new wonderful module, <code>mojang-minecraft-ui</code>. With that module, we can create form ui without need JSON-UI.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><p>Same with another modules, you need to add the dependency into your <code>manifest.json</code></p><div class="language-json line-numbers-mode"><pre><code><span class="token punctuation">{</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2bd50a27-ab5f-4f40-a596-3641627c635e&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>\u200A
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>And import the module on your script files</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  ActionFormData<span class="token punctuation">,</span>
  MessageFormData<span class="token punctuation">,</span>
  ModalFormData
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;mojang-minecraft-ui&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="form-type" tabindex="-1">Form Type <a class="header-anchor" href="#form-type" aria-hidden="true">#</a></h2><p>The <code>mojang-minecraft-ui</code> module bundled with 3 form types, the Action Form Data, Message Form Data, and Modal Form Data</p><h3 id="actionformdata" tabindex="-1">ActionFormData <a class="header-anchor" href="#actionformdata" aria-hidden="true">#</a></h3><p>Action Form is the form that contain bunch of buttons. This form is ideal for shop UI, minigames selection, etc. If you have seen featured server has UI that consist so many button, the form is same as it.</p><p>To use the form, you need to create it first.</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>The form has 3 functions/properties: Title, Body, and Button.</p><h4 id="title" tabindex="-1">Title <a class="header-anchor" href="#title" aria-hidden="true">#</a></h4><p>Title is a text on the top form to show the player what form is it.</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;Action Form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="body" tabindex="-1">Body <a class="header-anchor" href="#body" aria-hidden="true">#</a></h4><p>Body is some sort of description of the form. You can explain more of what the function of the form.</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;This is Action Form Body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="button" tabindex="-1">Button <a class="header-anchor" href="#button" aria-hidden="true">#</a></h4><p>Button is the main function of the form. The form can have so many button for the player to choose. Button has 2 arguments. First argument is the label, show the text of the button.</p><p>Second argument argument is button icon. Show the picture/icon of the button. To use it, you need to define the texture path. You can use resource pack to show icon (Example <code>textures/items/compass</code>). Custom texture need <code>.png</code> at the end of the path</p><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// No icon</span>
form<span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token string">&quot;Button 1&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// With vanilla texture</span>
form<span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token string">&quot;Button 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;textures/items/compass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// With custom texture</span>
form<span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token string">&quot;Button 3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;textures/icon/btn_icon_3.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Even the form can have infinite button, but the maximum number of button is 256 buttons. You must not have more than 256 buttons or your form may break.</p></div><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h4><p>This is the example of using the Action Form.</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;Minigames&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;Choose the games&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token string">&quot;Spleef&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;textures/items/diamond_shovel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token string">&quot;Murder Mystery&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;textures/items/iron_sword&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">button</span><span class="token punctuation">(</span><span class="token string">&quot;Bedwars&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;textures/minigames/bedwars.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+e+`" alt=""></p><h3 id="messageformdata" tabindex="-1">MessageFormData <a class="header-anchor" href="#messageformdata" aria-hidden="true">#</a></h3><p>Message form is the form that consist only 2 buttons with large description (body). This form is great for Yes/No question or OK/Cancel form.</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Message Form is almost the same as Action Form. Only difference are the button called Button1 and Button2 instead.</p><h4 id="title-1" tabindex="-1">Title <a class="header-anchor" href="#title-1" aria-hidden="true">#</a></h4><p>Title is a text on the top form to show the player what form is it.</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;Message Form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="body-1" tabindex="-1">Body <a class="header-anchor" href="#body-1" aria-hidden="true">#</a></h4><p>Body is some sort of description of the form. You can explain more of what the function of the form.</p><p>Body on Message Form is huge, so you can fit 5+ lines of message there. To break new line, use <code>\\n</code></p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;This is Message Form Body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="button1-and-button2" tabindex="-1">Button1 and Button2 <a class="header-anchor" href="#button1-and-button2" aria-hidden="true">#</a></h4><p>Message Form only contain 2 buttons, not like Action Form that can have more than 2 buttons. This form was created to give a warning or message to players.</p><p>Just like button on Action Form, button1 and button2 has 2 arguments, text and icon</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">button1</span><span class="token punctuation">(</span><span class="token string">&quot;Button 1: Yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">button2</span><span class="token punctuation">(</span><span class="token string">&quot;Button 2: No&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Because the Message Form only have 2 buttons, it&#39;s recommended to have &quot;Yes/OK&quot; option on &quot;button1&quot; and &quot;No/Cancel&quot; option on &quot;button2&quot;. You can see the problem in the &quot;Show and Respond&quot; section</p></div><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-hidden="true">#</a></h4><p>This is the example of using Message Form</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;Higher Random Tick Warning&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;Are you sure you want to run this command:\\n/gamerule randomtickspeed 1000\\nThis can cause lag to the world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">button1</span><span class="token punctuation">(</span><span class="token string">&quot;Yes, do it!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">button2</span><span class="token punctuation">(</span><span class="token string">&quot;No, leave it as default!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+p+`" alt=""></p><h3 id="modalformdata" tabindex="-1">ModalFormData <a class="header-anchor" href="#modalformdata" aria-hidden="true">#</a></h3><p>Modal Form has the most type input from another 2 form. It has text field, slider, dropdown, and toggle. Modal form is useful for some type of complicated form. Modal form doesn&#39;t have body property.</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModalFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Modal Form has 5 property: Title, Text field, Dropdown, Slider, and Toggle.</p><h4 id="title-2" tabindex="-1">Title <a class="header-anchor" href="#title-2" aria-hidden="true">#</a></h4><p>Title is a text on the top form to show the player what form is it.</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;Modal Form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h4 id="text-field" tabindex="-1">Text Field <a class="header-anchor" href="#text-field" aria-hidden="true">#</a></h4><p>Text field is property to allow player to insert text. It has 3 arguments.</p><ol><li>Label (<code>Str</code>), the title for the text field.</li><li>Placeholder Text (<code>Str</code>), some sort of description or info of the text field.</li><li>Default Value (<code>Str</code>)[Optional], set the default text to the text field. Default is empty (<code>null</code>)</li></ol><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// Without default value</span>
form<span class="token punctuation">.</span><span class="token function">textField</span><span class="token punctuation">(</span><span class="token string">&quot;Text Field&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Type something here&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// With default value</span>
form<span class="token punctuation">.</span><span class="token function">textField</span><span class="token punctuation">(</span><span class="token string">&quot;Text Field&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Type something here&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Default value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="dropdown" tabindex="-1">Dropdown <a class="header-anchor" href="#dropdown" aria-hidden="true">#</a></h4><p>Dropdown is property that contain some options. It has 3 arguments.</p><ol><li>Label (<code>Str</code>), the title for the dropdown.</li><li>Options (<code>List[String]</code>), the list of the options for the player choose.</li><li>Default Value Index (<code>Int</code>)[Optional], the index of default value. Default is <code>0</code> (first item in list)</li></ol><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// Internal Options</span>
form<span class="token punctuation">.</span><span class="token function">dropdown</span><span class="token punctuation">(</span><span class="token string">&quot;Dropdown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&quot;Opt 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Opt 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Opt 3&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Default Index &quot;1&quot; will select the second option as default option</span>

<span class="token comment">// External Options (Recommended)</span>
<span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;Opt 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Opt 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Opt 3&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">dropdown</span><span class="token punctuation">(</span><span class="token string">&quot;Dropdown&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="slider" tabindex="-1">Slider <a class="header-anchor" href="#slider" aria-hidden="true">#</a></h4><p>Slider is property that hold the range of numbers. It has 5 arguments.</p><ol><li>Label (<code>Str</code>), the title for the slider.</li><li>Min Number (<code>Int</code>), the lowest number of the range.</li><li>Max Number (<code>Int</code>), the highest number of the range.</li><li>Value Step (<code>Int</code>), the step value of the range.</li><li>Default Value (<code>Int</code>)[Optional], the default number of the slider. Default is the lowest number.</li></ol><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// Normal range from 1 to 100</span>
form<span class="token punctuation">.</span><span class="token function">slider</span><span class="token punctuation">(</span><span class="token string">&quot;Slider&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Even number from 0 to 10 with default value is 10</span>
form<span class="token punctuation">.</span><span class="token function">slider</span><span class="token punctuation">(</span><span class="token string">&quot;Slider&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="toggle" tabindex="-1">Toggle <a class="header-anchor" href="#toggle" aria-hidden="true">#</a></h4><p>Toggle is property for true/false options. It has 2 arguments.</p><ol><li>Label (<code>Str</code>), the title for the toggle.</li><li>Default Value (<code>Bool</code>), the default boolean of the toggle. Default is <code>false</code></li></ol><div class="language-js line-numbers-mode"><pre><code><span class="token comment">// Without default value</span>
form<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&quot;Toggle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// With default value</span>
form<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&quot;Toggle&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-hidden="true">#</a></h4><p>This is example of Modal Form with all the component</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> effectList <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&quot;Regeneration&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Protection&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Poison&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Wither&quot;</span> <span class="token punctuation">]</span>
form<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;Effect Generator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">textField</span><span class="token punctuation">(</span><span class="token string">&quot;Target&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Target of Effect&quot;</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">dropdown</span><span class="token punctuation">(</span><span class="token string">&quot;Effect Type&quot;</span><span class="token punctuation">,</span> effectList<span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">slider</span><span class="token punctuation">(</span><span class="token string">&quot;Effect Level&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&quot;Hide Effect Particle&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="`+o+`" alt=""></p><h2 id="show-and-respond" tabindex="-1">Show and Respond <a class="header-anchor" href="#show-and-respond" aria-hidden="true">#</a></h2><p>After we create the form, we need to show the form to the player and save the respond to run another task. But we need some event to show our form. The most used event is using <code>itemUse</code> event, that read when player use (right-click) an item.</p><p>Let say, our form must be open with stick that named &quot;Form Opener&quot;. You can use any event with any configuration in order to open the form</p><div class="language-js line-numbers-mode"><pre><code>world<span class="token punctuation">.</span>events<span class="token punctuation">.</span>beforeItemUse<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">&quot;minecraft:stick&quot;</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>item<span class="token punctuation">.</span>nameTag <span class="token operator">===</span> <span class="token string">&quot;Form Opener&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Form</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The form open when no UI is open. Meaning if you want to open the form with custom command/chat message, you can&#39;t open the form because chat UI is open. You need to use damage to close the chat UI, then open the form. Best thing is use another event.</p></div><p>Inside the if statement is where our form is show. Using <code>.show()</code>, the form will open. Inside show function, you need player class as an argument. After we show the form, we can use <code>.then()</code> to save the respond of player.</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// The code after player respond/close the form</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>When player close the form, the function inside the <code>.then()</code> is still running, even when no input was given. This can cause unintended code to running when player just closing the form. To prevent that, you need to cancel the form to running using <code>.isCanceled</code>.</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// This will stop the code when player close the form</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>isCanceled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token comment">// The code</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Finally, we can do something with player input. Every form has their own return input from the player.</p><h3 id="actionformdata-1" tabindex="-1">ActionFormData <a class="header-anchor" href="#actionformdata-1" aria-hidden="true">#</a></h3><p>Action form save the input inside <code>.selection</code>. It return a number of button index, start from 0 as button 1. You can use switch-case to run certain code for every button</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// This will stop the code when player close the form</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>isCanceled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> respond <span class="token operator">=</span> r<span class="token punctuation">.</span>selection<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>respond<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
      <span class="token comment">// Do something when button 1 is pressed</span>
      <span class="token comment">// Don&#39;t forget &quot;break&quot; for every case</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
      <span class="token comment">// Do something when button 2 is pressed</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">// You can add more for every button</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token comment">// Use when your button doesn&#39;t have function yet</span>
      <span class="token comment">// You don&#39;t need to use &quot;break&quot; on default case</span>
      <span class="token comment">// Remember to place the default on very bottom</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="modalformdata-1" tabindex="-1">ModalFormData <a class="header-anchor" href="#modalformdata-1" aria-hidden="true">#</a></h3><p>Same like action form, Message form save the input inside <code>.selection</code>. But something wrong happened. <code>.button1</code> return 1, but <code>.button2</code> return 0. The <code>.isCanceled</code> is not working, but closing the form will return 0. Meaning button2 is used for &quot;No/Cancel&quot; option.</p><div class="language-js line-numbers-mode"><pre><code>form<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// &quot;.isCanceled&quot; is not working, but return 0 to &quot;.selection&quot;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>selection <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do something when player close the form or press &quot;button2&quot;</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Do something when player press &quot;button1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="modalformdata-2" tabindex="-1">ModalFormData <a class="header-anchor" href="#modalformdata-2" aria-hidden="true">#</a></h3><p>Modal form save the input inside <code>.formValues</code> as list of input. The input is sort based on what component on the top to the button.</p><p>For example</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModalFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">textField</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">dropdown</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">slider</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>

<span class="token comment">// ...</span>
console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>formValues<span class="token punctuation">)</span>
<span class="token comment">// Output: [ &lt;TextField Input&gt;, &lt;Dropdown Input&gt;, &lt;Slider Input&gt;, &lt;Toggle Input&gt; ]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Because the form will sort based on what component on the top first, you can specify every input into variable</p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModalFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
form<span class="token punctuation">.</span><span class="token function">textField</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">dropdown</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">slider</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
form<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>

form<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// This will stop the code when player close the form</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>isCanceled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token comment">// This will give every input as their own variable</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span> textField<span class="token punctuation">,</span> dropdown<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> toggle <span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">.</span>formValues

  <span class="token comment">// Do something</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,97),l=[u];function i(r,k,m,d,b,h){return a(),s("div",null,l)}var v=n(c,[["render",i]]);export{g as __pageData,v as default};
